
import org.apache.spark.sql.SparkSession
import scala.math.random
import oracle.jdbc.driver.OracleDriver 

//fpms_staging.sql

object Spark_fpms_staging_combined {
  def main(args: Array[String]) {
    // create Spark context with Spark configuration
    val spark = SparkSession
      .builder
      .appName("Spark Pi")
      .master("spark://192.168.2.151:7077")
      .getOrCreate()

      
val ECA_REQUEST_DF = spark.read.parquet("/user/mapr/alexData/ECA_REQUEST.parquet")
ECA_REQUEST_DF.createOrReplaceTempView("ECA_REQUEST")

val ECA_RECORD_DF = spark.read.parquet("/user/mapr/alexData/ECA_RECORD.parquet")
ECA_RECORD_DF.createOrReplaceTempView("ECA_RECORD")


var BPMS_SYS_TENDER_TYPE_MASTER_ECA_REQ_DF = spark.sql("SELECT 'ECA' SRC, 0 SRC_SEQ, ECA_REQ.ID, ECA_REQ.MODIFYDATE, ECA_REQ.MODIFYUSER, ECA_REQ.CREATEDATE, ECA_REQ.CREATEUSER, ECA_REQ.SYSSTATUS, ECA_REQ.REQ_HEADER_ID, ECA_REQ.REQUEST_TYPE HEADER_TYPE, ECA_REQ.ID REQUEST_ID, ECA_REQ.REQUEST_NO, ECA_REQ.REQUEST_SEQ, 0 SRC_DUP_SEQ, ECA_REQ.RECORD_NO, ECA_REQ.ECA_RECORD_ID RECORD_ID, CAST(NULL AS VARCHAR(50)) PARENT_RECORD_NO, 'ECA' PARENT_SRC, 1 PARENT_SRC_SEQ, ECA_REQ.PARENT_ECA_RECORD_ID PARENT_RECORD_ID, ECA_REQ.REQUEST_DESCRIPTION DESCRIPTION, ECA_REQ.REQUEST_STATUS STATUS, ECA_REQ.REQUEST_STATUS_DATE STATUS_DATE, ECA_REQ.ACTIVITY_MASTER_ID, ECA_REQ.URGENCY_LEVEL, ECA_REQ.FIN_HIGHLIGHT_CHECKED_DATE, NULL RECORD_LOCK, NULL TOTAL_AMOUNT, NULL CUMULATED_VARIATION, NULL EXEMPTED_VARIATION, 'application/pdf' ATTACHMENT1_MIME_TYPE, ECA_REQ.ECA_PAPER_MIME_TYPE ATTACHMENT2_MIME_TYPE FROM ECA_REQUEST ECA_REQ")

var BPMS_SYS_TENDER_TYPE_MASTER_ECA_REC_DF = spark.sql("SELECT 'ECA' SRC, 1 SRC_SEQ, ECA_REC.ID, ECA_REC.MODIFYDATE, ECA_REC.MODIFYUSER, ECA_REC.CREATEDATE, ECA_REC.CREATEUSER, ECA_REC.SYSSTATUS, NULL REQ_HEADER_ID, NULL HEADER_TYPE, NULL REQUEST_ID, NULL REQUEST_NO, NULL REQUEST_SEQ, 0 SRC_DUP_SEQ, ECA_REC.RECORD_NO, ECA_REC.ID RECORD_ID, CAST(NULL AS VARCHAR(50)) PARENT_RECORD_NO, 'ECA' PARENT_SRC, 1 PARENT_SRC_SEQ, ECA_REC.PARENT_ECA_RECORD PARENT_RECORD_ID, ECA_REC.DESCRIPTION, ECA_REC.RECORD_STATUS STATUS, ECA_REC.RECORD_STATUS_DATE STATUS_DATE, ECA_REC.ACTIVITY_MASTER_ID, NULL URGENCY_LEVEL, NULL FIN_HIGHLIGHT_CHECKED_DATE, ECA_REC.RECORD_LOCK, ECA_REC.TOTAL_AMOUNT, ECA_REC.CUM_VARIATION CUMULATED_VARIATION, ECA_REC.EXEMPTED_VARIATION, NULL ATTACHMENT1_MIME_TYPE, NULL ATTACHMENT2_MIME_TYPE FROM ECA_RECORD ECA_REC")

var unioned = spark.sql("SELECT 'ECA' SRC, 0 SRC_SEQ, ECA_REQ.ID, ECA_REQ.MODIFYDATE, ECA_REQ.MODIFYUSER, ECA_REQ.CREATEDATE, ECA_REQ.CREATEUSER, ECA_REQ.SYSSTATUS, ECA_REQ.REQ_HEADER_ID, ECA_REQ.REQUEST_TYPE HEADER_TYPE, ECA_REQ.ID REQUEST_ID, ECA_REQ.REQUEST_NO, ECA_REQ.REQUEST_SEQ, 0 SRC_DUP_SEQ, ECA_REQ.RECORD_NO, ECA_REQ.ECA_RECORD_ID RECORD_ID, CAST(NULL AS VARCHAR(50)) PARENT_RECORD_NO, 'ECA' PARENT_SRC, 1 PARENT_SRC_SEQ, ECA_REQ.PARENT_ECA_RECORD_ID PARENT_RECORD_ID, ECA_REQ.REQUEST_DESCRIPTION DESCRIPTION, ECA_REQ.REQUEST_STATUS STATUS, ECA_REQ.REQUEST_STATUS_DATE STATUS_DATE, ECA_REQ.ACTIVITY_MASTER_ID, ECA_REQ.URGENCY_LEVEL, ECA_REQ.FIN_HIGHLIGHT_CHECKED_DATE, NULL RECORD_LOCK, NULL TOTAL_AMOUNT, NULL CUMULATED_VARIATION, NULL EXEMPTED_VARIATION, 'application/pdf' ATTACHMENT1_MIME_TYPE, ECA_REQ.ECA_PAPER_MIME_TYPE ATTACHMENT2_MIME_TYPE FROM ECA_REQUEST ECA_REQ union all SELECT 'ECA' SRC, 1 SRC_SEQ, ECA_REC.ID, ECA_REC.MODIFYDATE, ECA_REC.MODIFYUSER, ECA_REC.CREATEDATE, ECA_REC.CREATEUSER, ECA_REC.SYSSTATUS, NULL REQ_HEADER_ID, NULL HEADER_TYPE, NULL REQUEST_ID, NULL REQUEST_NO, NULL REQUEST_SEQ, 0 SRC_DUP_SEQ, ECA_REC.RECORD_NO, ECA_REC.ID RECORD_ID, CAST(NULL AS VARCHAR(50)) PARENT_RECORD_NO, 'ECA' PARENT_SRC, 1 PARENT_SRC_SEQ, ECA_REC.PARENT_ECA_RECORD PARENT_RECORD_ID, ECA_REC.DESCRIPTION, ECA_REC.RECORD_STATUS STATUS, ECA_REC.RECORD_STATUS_DATE STATUS_DATE, ECA_REC.ACTIVITY_MASTER_ID, NULL URGENCY_LEVEL, NULL FIN_HIGHLIGHT_CHECKED_DATE, ECA_REC.RECORD_LOCK, ECA_REC.TOTAL_AMOUNT, ECA_REC.CUM_VARIATION CUMULATED_VARIATION, ECA_REC.EXEMPTED_VARIATION, NULL ATTACHMENT1_MIME_TYPE, NULL ATTACHMENT2_MIME_TYPE FROM ECA_RECORD ECA_REC")

unioned.createOrReplaceTempView("RQC")

unioned
spark.sql("select * from RQC MODEL PARTITION BY (RQC.SRC) DIMENSION BY ( RQC.SRC_SEQ, DECODE(RQC.SRC_SEQ, 0, RQC.REQUEST_ID, LAG(RQC.REQUEST_ID) OVER (PARTITION BY RQC.SRC, RQC.RECORD_ID ORDER BY CASE WHEN RQC.SRC_SEQ = 1 OR RQC.STATUS IN ('Approved', 'Exempted', 'Paid', 'Preparing Payment', 'Received', 'Revised') THEN 1 ELSE 0 END, DECODE(RQC.STATUS, 'Approving', NULL, RQC.SRC_SEQ), RQC.SRC_SEQ, RQC.CREATEDATE, RQC.ID)) REQUEST_ID, DECODE(RQC.SRC_SEQ, 0, RQC.REQUEST_SEQ, LAG(RQC.REQUEST_SEQ) OVER (PARTITION BY RQC.SRC, RQC.RECORD_ID ORDER BY CASE WHEN RQC.SRC_SEQ = 1 OR RQC.STATUS IN ('Approved', 'Exempted', 'Paid', 'Preparing Payment', 'Received', 'Revised') THEN 1 ELSE 0 END, DECODE(RQC.STATUS, 'Approving', NULL, RQC.SRC_SEQ), RQC.SRC_SEQ, RQC.CREATEDATE, RQC.ID)) REQUEST_SEQ, RQC.RECORD_ID, RQC.SRC_DUP_SEQ ) MEASURES ( ROW_NUMBER() OVER (PARTITION BY RQC.SRC, RQC.RECORD_ID, NVL2(RQC.RECORD_ID, NULL, RQC.REQUEST_ID) ORDER BY CASE WHEN RQC.SRC_SEQ = 0 AND RQC.STATUS = 'Approving' AND RQC.SRC NOT IN ('GPPO', 'GPPR') THEN 0 ELSE 1 END, RQC.REQUEST_SEQ DESC NULLS FIRST, RQC.SRC_SEQ DESC NULLS FIRST, RQC.MODIFYDATE DESC NULLS FIRST, RQC.ID DESC NULLS FIRST) - 1 SRC_LATEST_SEQ, ID, MODIFYDATE, MODIFYUSER, CREATEDATE, CREATEUSER, SYSSTATUS, REQ_HEADER_ID, HEADER_TYPE, REQUEST_NO, RECORD_NO, PARENT_RECORD_NO, PARENT_SRC, PARENT_SRC_SEQ, PARENT_RECORD_ID, DESCRIPTION, STATUS, STATUS_DATE, ACTIVITY_MASTER_ID, URGENCY_LEVEL, FIN_HIGHLIGHT_CHECKED_DATE, RECORD_LOCK, TOTAL_AMOUNT, CUMULATED_VARIATION, EXEMPTED_VARIATION, ATTACHMENT1_MIME_TYPE, ATTACHMENT2_MIME_TYPE ) ( REQ_HEADER_ID[1, ANY, ANY, ANY, ANY] = REQ_HEADER_ID[0, CV(), CV(), CV(), 0], HEADER_TYPE[1, ANY, ANY, ANY, ANY] = NVL(HEADER_TYPE[0, CV(), CV(), CV(), 0], 'ECA'), REQUEST_NO[1, ANY, ANY, ANY, ANY] = REQUEST_NO[0, CV(), CV(), CV(), 0]--, --TODO: --PARENT_RECORD_NO[ANY, ANY, ANY, ANY, ANY] = RECORD_NO[1, PARENT_RECORD_ID[CV(), CV(), CV(), CV(), CV()], CV(), CV(), 0] )")



           
    spark.stop()
  }
}